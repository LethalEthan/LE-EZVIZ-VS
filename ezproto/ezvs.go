// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: ezvs.proto

package ezproto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PdsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pdssrv        *string                `protobuf:"bytes,1,opt,name=pdssrv,proto3,oneof" json:"pdssrv,omitempty"`
	Peerpbkey     *string                `protobuf:"bytes,2,opt,name=peerpbkey,proto3,oneof" json:"peerpbkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdsInfo) Reset() {
	*x = PdsInfo{}
	mi := &file_ezvs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdsInfo) ProtoMessage() {}

func (x *PdsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ezvs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdsInfo.ProtoReflect.Descriptor instead.
func (*PdsInfo) Descriptor() ([]byte, []int) {
	return file_ezvs_proto_rawDescGZIP(), []int{0}
}

func (x *PdsInfo) GetPdssrv() string {
	if x != nil && x.Pdssrv != nil {
		return *x.Pdssrv
	}
	return ""
}

func (x *PdsInfo) GetPeerpbkey() string {
	if x != nil && x.Peerpbkey != nil {
		return *x.Peerpbkey
	}
	return ""
}

type StreamInfoNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streamurl     *string                `protobuf:"bytes,1,opt,name=streamurl,proto3,oneof" json:"streamurl,omitempty"`
	Vtmstreamkey  *string                `protobuf:"bytes,2,opt,name=vtmstreamkey,proto3,oneof" json:"vtmstreamkey,omitempty"`
	Useragent     *string                `protobuf:"bytes,3,opt,name=useragent,proto3,oneof" json:"useragent,omitempty"`
	Peerpublickey *string                `protobuf:"bytes,4,opt,name=peerpublickey,proto3,oneof" json:"peerpublickey,omitempty"`
	PdsInfo       *PdsInfo               `protobuf:"bytes,10,opt,name=pds_info,json=pdsInfo,proto3" json:"pds_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamInfoNotify) Reset() {
	*x = StreamInfoNotify{}
	mi := &file_ezvs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoNotify) ProtoMessage() {}

func (x *StreamInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_ezvs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoNotify.ProtoReflect.Descriptor instead.
func (*StreamInfoNotify) Descriptor() ([]byte, []int) {
	return file_ezvs_proto_rawDescGZIP(), []int{1}
}

func (x *StreamInfoNotify) GetStreamurl() string {
	if x != nil && x.Streamurl != nil {
		return *x.Streamurl
	}
	return ""
}

func (x *StreamInfoNotify) GetVtmstreamkey() string {
	if x != nil && x.Vtmstreamkey != nil {
		return *x.Vtmstreamkey
	}
	return ""
}

func (x *StreamInfoNotify) GetUseragent() string {
	if x != nil && x.Useragent != nil {
		return *x.Useragent
	}
	return ""
}

func (x *StreamInfoNotify) GetPeerpublickey() string {
	if x != nil && x.Peerpublickey != nil {
		return *x.Peerpublickey
	}
	return ""
}

func (x *StreamInfoNotify) GetPdsInfo() *PdsInfo {
	if x != nil {
		return x.PdsInfo
	}
	return nil
}

type StreamInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streamurl     *string                `protobuf:"bytes,1,opt,name=streamurl,proto3,oneof" json:"streamurl,omitempty"`
	Vtmstreamkey  *string                `protobuf:"bytes,2,opt,name=vtmstreamkey,proto3,oneof" json:"vtmstreamkey,omitempty"`
	Useragent     *string                `protobuf:"bytes,3,opt,name=useragent,proto3,oneof" json:"useragent,omitempty"`
	Proxytype     *int32                 `protobuf:"varint,4,opt,name=proxytype,proto3,oneof" json:"proxytype,omitempty"`
	Pdsstring     *string                `protobuf:"bytes,5,opt,name=pdsstring,proto3,oneof" json:"pdsstring,omitempty"`
	Clnversion    *string                `protobuf:"bytes,6,opt,name=clnversion,proto3,oneof" json:"clnversion,omitempty"`
	Pdsnum        *int32                 `protobuf:"varint,7,opt,name=pdsnum,proto3,oneof" json:"pdsnum,omitempty"`
	PdsInfo       *PdsInfo               `protobuf:"bytes,20,opt,name=pds_info,json=pdsInfo,proto3" json:"pds_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamInfoReq) Reset() {
	*x = StreamInfoReq{}
	mi := &file_ezvs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoReq) ProtoMessage() {}

func (x *StreamInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ezvs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoReq.ProtoReflect.Descriptor instead.
func (*StreamInfoReq) Descriptor() ([]byte, []int) {
	return file_ezvs_proto_rawDescGZIP(), []int{2}
}

func (x *StreamInfoReq) GetStreamurl() string {
	if x != nil && x.Streamurl != nil {
		return *x.Streamurl
	}
	return ""
}

func (x *StreamInfoReq) GetVtmstreamkey() string {
	if x != nil && x.Vtmstreamkey != nil {
		return *x.Vtmstreamkey
	}
	return ""
}

func (x *StreamInfoReq) GetUseragent() string {
	if x != nil && x.Useragent != nil {
		return *x.Useragent
	}
	return ""
}

func (x *StreamInfoReq) GetProxytype() int32 {
	if x != nil && x.Proxytype != nil {
		return *x.Proxytype
	}
	return 0
}

func (x *StreamInfoReq) GetPdsstring() string {
	if x != nil && x.Pdsstring != nil {
		return *x.Pdsstring
	}
	return ""
}

func (x *StreamInfoReq) GetClnversion() string {
	if x != nil && x.Clnversion != nil {
		return *x.Clnversion
	}
	return ""
}

func (x *StreamInfoReq) GetPdsnum() int32 {
	if x != nil && x.Pdsnum != nil {
		return *x.Pdsnum
	}
	return 0
}

func (x *StreamInfoReq) GetPdsInfo() *PdsInfo {
	if x != nil {
		return x.PdsInfo
	}
	return nil
}

type StartStreamReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Serial        *string                `protobuf:"bytes,1,opt,name=serial,proto3,oneof" json:"serial,omitempty"`
	Channel       *int32                 `protobuf:"varint,2,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	Streamtype    *int32                 `protobuf:"varint,3,opt,name=streamtype,proto3,oneof" json:"streamtype,omitempty"`
	Businesstype  *int32                 `protobuf:"varint,4,opt,name=businesstype,proto3,oneof" json:"businesstype,omitempty"`
	Token         *string                `protobuf:"bytes,5,opt,name=token,proto3,oneof" json:"token,omitempty"`
	Clntype       *int32                 `protobuf:"varint,6,opt,name=clntype,proto3,oneof" json:"clntype,omitempty"`
	Streamkey     *string                `protobuf:"bytes,7,opt,name=streamkey,proto3,oneof" json:"streamkey,omitempty"`
	Peerhost      *string                `protobuf:"bytes,8,opt,name=peerhost,proto3,oneof" json:"peerhost,omitempty"`
	Peerport      *int32                 `protobuf:"varint,9,opt,name=peerport,proto3,oneof" json:"peerport,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamReq) Reset() {
	*x = StartStreamReq{}
	mi := &file_ezvs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamReq) ProtoMessage() {}

func (x *StartStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_ezvs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamReq.ProtoReflect.Descriptor instead.
func (*StartStreamReq) Descriptor() ([]byte, []int) {
	return file_ezvs_proto_rawDescGZIP(), []int{3}
}

func (x *StartStreamReq) GetSerial() string {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return ""
}

func (x *StartStreamReq) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *StartStreamReq) GetStreamtype() int32 {
	if x != nil && x.Streamtype != nil {
		return *x.Streamtype
	}
	return 0
}

func (x *StartStreamReq) GetBusinesstype() int32 {
	if x != nil && x.Businesstype != nil {
		return *x.Businesstype
	}
	return 0
}

func (x *StartStreamReq) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *StartStreamReq) GetClntype() int32 {
	if x != nil && x.Clntype != nil {
		return *x.Clntype
	}
	return 0
}

func (x *StartStreamReq) GetStreamkey() string {
	if x != nil && x.Streamkey != nil {
		return *x.Streamkey
	}
	return ""
}

func (x *StartStreamReq) GetPeerhost() string {
	if x != nil && x.Peerhost != nil {
		return *x.Peerhost
	}
	return ""
}

func (x *StartStreamReq) GetPeerport() int32 {
	if x != nil && x.Peerport != nil {
		return *x.Peerport
	}
	return 0
}

type StreamInfoRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *int32                 `protobuf:"varint,1,opt,name=result,proto3,oneof" json:"result,omitempty"`
	Datakey       *int32                 `protobuf:"varint,2,opt,name=datakey,proto3,oneof" json:"datakey,omitempty"`
	Streamhead    *string                `protobuf:"bytes,3,opt,name=streamhead,proto3,oneof" json:"streamhead,omitempty"`
	Streamssn     *string                `protobuf:"bytes,4,opt,name=streamssn,proto3,oneof" json:"streamssn,omitempty"`
	Vtmstreamkey  *string                `protobuf:"bytes,5,opt,name=vtmstreamkey,proto3,oneof" json:"vtmstreamkey,omitempty"`
	Serverinfo    *string                `protobuf:"bytes,6,opt,name=serverinfo,proto3,oneof" json:"serverinfo,omitempty"`
	Streamurl     *string                `protobuf:"bytes,7,opt,name=streamurl,proto3,oneof" json:"streamurl,omitempty"`
	Srvinfo       *string                `protobuf:"bytes,8,opt,name=srvinfo,proto3,oneof" json:"srvinfo,omitempty"`
	Aesmd5        *string                `protobuf:"bytes,9,opt,name=aesmd5,proto3,oneof" json:"aesmd5,omitempty"`
	Udptransinfo  *string                `protobuf:"bytes,10,opt,name=udptransinfo,proto3,oneof" json:"udptransinfo,omitempty"`
	Peerpbkey     *string                `protobuf:"bytes,11,opt,name=peerpbkey,proto3,oneof" json:"peerpbkey,omitempty"`
	Pdslist       []*PdsInfo             `protobuf:"bytes,12,rep,name=pdslist,proto3" json:"pdslist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamInfoRsp) Reset() {
	*x = StreamInfoRsp{}
	mi := &file_ezvs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoRsp) ProtoMessage() {}

func (x *StreamInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ezvs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoRsp.ProtoReflect.Descriptor instead.
func (*StreamInfoRsp) Descriptor() ([]byte, []int) {
	return file_ezvs_proto_rawDescGZIP(), []int{4}
}

func (x *StreamInfoRsp) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *StreamInfoRsp) GetDatakey() int32 {
	if x != nil && x.Datakey != nil {
		return *x.Datakey
	}
	return 0
}

func (x *StreamInfoRsp) GetStreamhead() string {
	if x != nil && x.Streamhead != nil {
		return *x.Streamhead
	}
	return ""
}

func (x *StreamInfoRsp) GetStreamssn() string {
	if x != nil && x.Streamssn != nil {
		return *x.Streamssn
	}
	return ""
}

func (x *StreamInfoRsp) GetVtmstreamkey() string {
	if x != nil && x.Vtmstreamkey != nil {
		return *x.Vtmstreamkey
	}
	return ""
}

func (x *StreamInfoRsp) GetServerinfo() string {
	if x != nil && x.Serverinfo != nil {
		return *x.Serverinfo
	}
	return ""
}

func (x *StreamInfoRsp) GetStreamurl() string {
	if x != nil && x.Streamurl != nil {
		return *x.Streamurl
	}
	return ""
}

func (x *StreamInfoRsp) GetSrvinfo() string {
	if x != nil && x.Srvinfo != nil {
		return *x.Srvinfo
	}
	return ""
}

func (x *StreamInfoRsp) GetAesmd5() string {
	if x != nil && x.Aesmd5 != nil {
		return *x.Aesmd5
	}
	return ""
}

func (x *StreamInfoRsp) GetUdptransinfo() string {
	if x != nil && x.Udptransinfo != nil {
		return *x.Udptransinfo
	}
	return ""
}

func (x *StreamInfoRsp) GetPeerpbkey() string {
	if x != nil && x.Peerpbkey != nil {
		return *x.Peerpbkey
	}
	return ""
}

func (x *StreamInfoRsp) GetPdslist() []*PdsInfo {
	if x != nil {
		return x.Pdslist
	}
	return nil
}

type StreamKeepAliveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streamssn     []byte                 `protobuf:"bytes,1,opt,name=streamssn,proto3,oneof" json:"streamssn,omitempty"`
	RawMetadata   []byte                 `protobuf:"bytes,2,opt,name=raw_metadata,json=rawMetadata,proto3,oneof" json:"raw_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamKeepAliveReq) Reset() {
	*x = StreamKeepAliveReq{}
	mi := &file_ezvs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamKeepAliveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamKeepAliveReq) ProtoMessage() {}

func (x *StreamKeepAliveReq) ProtoReflect() protoreflect.Message {
	mi := &file_ezvs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamKeepAliveReq.ProtoReflect.Descriptor instead.
func (*StreamKeepAliveReq) Descriptor() ([]byte, []int) {
	return file_ezvs_proto_rawDescGZIP(), []int{5}
}

func (x *StreamKeepAliveReq) GetStreamssn() []byte {
	if x != nil {
		return x.Streamssn
	}
	return nil
}

func (x *StreamKeepAliveReq) GetRawMetadata() []byte {
	if x != nil {
		return x.RawMetadata
	}
	return nil
}

type StreamKeepAliveRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *int32                 `protobuf:"varint,1,opt,name=result,proto3,oneof" json:"result,omitempty"`
	RawMetadata   []byte                 `protobuf:"bytes,2,opt,name=raw_metadata,json=rawMetadata,proto3,oneof" json:"raw_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamKeepAliveRsp) Reset() {
	*x = StreamKeepAliveRsp{}
	mi := &file_ezvs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamKeepAliveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamKeepAliveRsp) ProtoMessage() {}

func (x *StreamKeepAliveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ezvs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamKeepAliveRsp.ProtoReflect.Descriptor instead.
func (*StreamKeepAliveRsp) Descriptor() ([]byte, []int) {
	return file_ezvs_proto_rawDescGZIP(), []int{6}
}

func (x *StreamKeepAliveRsp) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *StreamKeepAliveRsp) GetRawMetadata() []byte {
	if x != nil {
		return x.RawMetadata
	}
	return nil
}

var File_ezvs_proto protoreflect.FileDescriptor

const file_ezvs_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"ezvs.proto\x12\vle.ezviz.vs\"b\n" +
	"\aPdsInfo\x12\x1b\n" +
	"\x06pdssrv\x18\x01 \x01(\tH\x00R\x06pdssrv\x88\x01\x01\x12!\n" +
	"\tpeerpbkey\x18\x02 \x01(\tH\x01R\tpeerpbkey\x88\x01\x01B\t\n" +
	"\a_pdssrvB\f\n" +
	"\n" +
	"_peerpbkey\"\x9c\x02\n" +
	"\x10StreamInfoNotify\x12!\n" +
	"\tstreamurl\x18\x01 \x01(\tH\x00R\tstreamurl\x88\x01\x01\x12'\n" +
	"\fvtmstreamkey\x18\x02 \x01(\tH\x01R\fvtmstreamkey\x88\x01\x01\x12!\n" +
	"\tuseragent\x18\x03 \x01(\tH\x02R\tuseragent\x88\x01\x01\x12)\n" +
	"\rpeerpublickey\x18\x04 \x01(\tH\x03R\rpeerpublickey\x88\x01\x01\x12/\n" +
	"\bpds_info\x18\n" +
	" \x01(\v2\x14.le.ezviz.vs.PdsInfoR\apdsInfoB\f\n" +
	"\n" +
	"_streamurlB\x0f\n" +
	"\r_vtmstreamkeyB\f\n" +
	"\n" +
	"_useragentB\x10\n" +
	"\x0e_peerpublickey\"\x9a\x03\n" +
	"\rStreamInfoReq\x12!\n" +
	"\tstreamurl\x18\x01 \x01(\tH\x00R\tstreamurl\x88\x01\x01\x12'\n" +
	"\fvtmstreamkey\x18\x02 \x01(\tH\x01R\fvtmstreamkey\x88\x01\x01\x12!\n" +
	"\tuseragent\x18\x03 \x01(\tH\x02R\tuseragent\x88\x01\x01\x12!\n" +
	"\tproxytype\x18\x04 \x01(\x05H\x03R\tproxytype\x88\x01\x01\x12!\n" +
	"\tpdsstring\x18\x05 \x01(\tH\x04R\tpdsstring\x88\x01\x01\x12#\n" +
	"\n" +
	"clnversion\x18\x06 \x01(\tH\x05R\n" +
	"clnversion\x88\x01\x01\x12\x1b\n" +
	"\x06pdsnum\x18\a \x01(\x05H\x06R\x06pdsnum\x88\x01\x01\x12/\n" +
	"\bpds_info\x18\x14 \x01(\v2\x14.le.ezviz.vs.PdsInfoR\apdsInfoB\f\n" +
	"\n" +
	"_streamurlB\x0f\n" +
	"\r_vtmstreamkeyB\f\n" +
	"\n" +
	"_useragentB\f\n" +
	"\n" +
	"_proxytypeB\f\n" +
	"\n" +
	"_pdsstringB\r\n" +
	"\v_clnversionB\t\n" +
	"\a_pdsnum\"\xae\x03\n" +
	"\x0eStartStreamReq\x12\x1b\n" +
	"\x06serial\x18\x01 \x01(\tH\x00R\x06serial\x88\x01\x01\x12\x1d\n" +
	"\achannel\x18\x02 \x01(\x05H\x01R\achannel\x88\x01\x01\x12#\n" +
	"\n" +
	"streamtype\x18\x03 \x01(\x05H\x02R\n" +
	"streamtype\x88\x01\x01\x12'\n" +
	"\fbusinesstype\x18\x04 \x01(\x05H\x03R\fbusinesstype\x88\x01\x01\x12\x19\n" +
	"\x05token\x18\x05 \x01(\tH\x04R\x05token\x88\x01\x01\x12\x1d\n" +
	"\aclntype\x18\x06 \x01(\x05H\x05R\aclntype\x88\x01\x01\x12!\n" +
	"\tstreamkey\x18\a \x01(\tH\x06R\tstreamkey\x88\x01\x01\x12\x1f\n" +
	"\bpeerhost\x18\b \x01(\tH\aR\bpeerhost\x88\x01\x01\x12\x1f\n" +
	"\bpeerport\x18\t \x01(\x05H\bR\bpeerport\x88\x01\x01B\t\n" +
	"\a_serialB\n" +
	"\n" +
	"\b_channelB\r\n" +
	"\v_streamtypeB\x0f\n" +
	"\r_businesstypeB\b\n" +
	"\x06_tokenB\n" +
	"\n" +
	"\b_clntypeB\f\n" +
	"\n" +
	"_streamkeyB\v\n" +
	"\t_peerhostB\v\n" +
	"\t_peerport\"\xd4\x04\n" +
	"\rStreamInfoRsp\x12\x1b\n" +
	"\x06result\x18\x01 \x01(\x05H\x00R\x06result\x88\x01\x01\x12\x1d\n" +
	"\adatakey\x18\x02 \x01(\x05H\x01R\adatakey\x88\x01\x01\x12#\n" +
	"\n" +
	"streamhead\x18\x03 \x01(\tH\x02R\n" +
	"streamhead\x88\x01\x01\x12!\n" +
	"\tstreamssn\x18\x04 \x01(\tH\x03R\tstreamssn\x88\x01\x01\x12'\n" +
	"\fvtmstreamkey\x18\x05 \x01(\tH\x04R\fvtmstreamkey\x88\x01\x01\x12#\n" +
	"\n" +
	"serverinfo\x18\x06 \x01(\tH\x05R\n" +
	"serverinfo\x88\x01\x01\x12!\n" +
	"\tstreamurl\x18\a \x01(\tH\x06R\tstreamurl\x88\x01\x01\x12\x1d\n" +
	"\asrvinfo\x18\b \x01(\tH\aR\asrvinfo\x88\x01\x01\x12\x1b\n" +
	"\x06aesmd5\x18\t \x01(\tH\bR\x06aesmd5\x88\x01\x01\x12'\n" +
	"\fudptransinfo\x18\n" +
	" \x01(\tH\tR\fudptransinfo\x88\x01\x01\x12!\n" +
	"\tpeerpbkey\x18\v \x01(\tH\n" +
	"R\tpeerpbkey\x88\x01\x01\x12.\n" +
	"\apdslist\x18\f \x03(\v2\x14.le.ezviz.vs.PdsInfoR\apdslistB\t\n" +
	"\a_resultB\n" +
	"\n" +
	"\b_datakeyB\r\n" +
	"\v_streamheadB\f\n" +
	"\n" +
	"_streamssnB\x0f\n" +
	"\r_vtmstreamkeyB\r\n" +
	"\v_serverinfoB\f\n" +
	"\n" +
	"_streamurlB\n" +
	"\n" +
	"\b_srvinfoB\t\n" +
	"\a_aesmd5B\x0f\n" +
	"\r_udptransinfoB\f\n" +
	"\n" +
	"_peerpbkey\"~\n" +
	"\x12StreamKeepAliveReq\x12!\n" +
	"\tstreamssn\x18\x01 \x01(\fH\x00R\tstreamssn\x88\x01\x01\x12&\n" +
	"\fraw_metadata\x18\x02 \x01(\fH\x01R\vrawMetadata\x88\x01\x01B\f\n" +
	"\n" +
	"_streamssnB\x0f\n" +
	"\r_raw_metadata\"u\n" +
	"\x12StreamKeepAliveRsp\x12\x1b\n" +
	"\x06result\x18\x01 \x01(\x05H\x00R\x06result\x88\x01\x01\x12&\n" +
	"\fraw_metadata\x18\x02 \x01(\fH\x01R\vrawMetadata\x88\x01\x01B\t\n" +
	"\a_resultB\x0f\n" +
	"\r_raw_metadataB\x1dZ\x1ble-ezviz-vs/ezproto;ezprotob\x06proto3"

var (
	file_ezvs_proto_rawDescOnce sync.Once
	file_ezvs_proto_rawDescData []byte
)

func file_ezvs_proto_rawDescGZIP() []byte {
	file_ezvs_proto_rawDescOnce.Do(func() {
		file_ezvs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ezvs_proto_rawDesc), len(file_ezvs_proto_rawDesc)))
	})
	return file_ezvs_proto_rawDescData
}

var file_ezvs_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ezvs_proto_goTypes = []any{
	(*PdsInfo)(nil),            // 0: le.ezviz.vs.PdsInfo
	(*StreamInfoNotify)(nil),   // 1: le.ezviz.vs.StreamInfoNotify
	(*StreamInfoReq)(nil),      // 2: le.ezviz.vs.StreamInfoReq
	(*StartStreamReq)(nil),     // 3: le.ezviz.vs.StartStreamReq
	(*StreamInfoRsp)(nil),      // 4: le.ezviz.vs.StreamInfoRsp
	(*StreamKeepAliveReq)(nil), // 5: le.ezviz.vs.StreamKeepAliveReq
	(*StreamKeepAliveRsp)(nil), // 6: le.ezviz.vs.StreamKeepAliveRsp
}
var file_ezvs_proto_depIdxs = []int32{
	0, // 0: le.ezviz.vs.StreamInfoNotify.pds_info:type_name -> le.ezviz.vs.PdsInfo
	0, // 1: le.ezviz.vs.StreamInfoReq.pds_info:type_name -> le.ezviz.vs.PdsInfo
	0, // 2: le.ezviz.vs.StreamInfoRsp.pdslist:type_name -> le.ezviz.vs.PdsInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ezvs_proto_init() }
func file_ezvs_proto_init() {
	if File_ezvs_proto != nil {
		return
	}
	file_ezvs_proto_msgTypes[0].OneofWrappers = []any{}
	file_ezvs_proto_msgTypes[1].OneofWrappers = []any{}
	file_ezvs_proto_msgTypes[2].OneofWrappers = []any{}
	file_ezvs_proto_msgTypes[3].OneofWrappers = []any{}
	file_ezvs_proto_msgTypes[4].OneofWrappers = []any{}
	file_ezvs_proto_msgTypes[5].OneofWrappers = []any{}
	file_ezvs_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ezvs_proto_rawDesc), len(file_ezvs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ezvs_proto_goTypes,
		DependencyIndexes: file_ezvs_proto_depIdxs,
		MessageInfos:      file_ezvs_proto_msgTypes,
	}.Build()
	File_ezvs_proto = out.File
	file_ezvs_proto_goTypes = nil
	file_ezvs_proto_depIdxs = nil
}
